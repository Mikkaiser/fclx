// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createChat = `-- name: CreateChat :exec
INSERT INTO chats 
    (id, user_id, initial_message_id, status, token_usage, model, model_max_tokens,temperature, top_p, n, stop, max_tokens, presence_penalty, frequency_penalty, created_at, updated_at)
    VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
`

type CreateChatParams struct {
	ID               string
	UserID           string
	InitialMessageID string
	Status           string
	TokenUsage       int32
	Model            string
	ModelMaxTokens   int32
	Temperature      float64
	TopP             float64
	N                int32
	Stop             string
	MaxTokens        int32
	PresencePenalty  float64
	FrequencyPenalty float64
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) error {
	_, err := q.db.ExecContext(ctx, createChat,
		arg.ID,
		arg.UserID,
		arg.InitialMessageID,
		arg.Status,
		arg.TokenUsage,
		arg.Model,
		arg.ModelMaxTokens,
		arg.Temperature,
		arg.TopP,
		arg.N,
		arg.Stop,
		arg.MaxTokens,
		arg.PresencePenalty,
		arg.FrequencyPenalty,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const findChatById = `-- name: FindChatById :one
SELECT id, user_id, initial_message_id, status, token_usage, model, model_max_tokens, temperature, top_p, n, stop, max_tokens, presence_penalty, frequency_penalty, created_at, updated_at FROM chats WHERE id = ?
`

func (q *Queries) FindChatById(ctx context.Context, id string) (Chat, error) {
	row := q.db.QueryRowContext(ctx, findChatById, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InitialMessageID,
		&i.Status,
		&i.TokenUsage,
		&i.Model,
		&i.ModelMaxTokens,
		&i.Temperature,
		&i.TopP,
		&i.N,
		&i.Stop,
		&i.MaxTokens,
		&i.PresencePenalty,
		&i.FrequencyPenalty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
